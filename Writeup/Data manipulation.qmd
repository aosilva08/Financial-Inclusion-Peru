---
title: "30538 Final Project: Financial Inclusion in Peru"
author: "Alejandra Silva"
date: "2024-10-03"
format: 
  html:
    code-overflow: wrap   
execute:
  eval: true          
  echo: false          
---

## Executive Summary

This project focuses on analyzing financial inclusion in Peru, emphasizing the challenges and opportunities within a centralized financial system. Peru’s economic activities are heavily concentrated in Lima, which leaves other regions with limited access to credit. Financial inclusion is essential for empowering small and medium enterprises (SMEs) and driving economic growth across the country. By improving access to credit, particularly in underserved regions, the project aims to highlight the potential for SMEs to stimulate economic activity, create jobs, and reduce regional disparities.

## 1. Objetive

The primary objective of this project is to assess the state of financial inclusion in Peru, focusing on the extent and impact of centralization in the country’s financial system. Specifically, the project aims to:

- Measure the growth and distribution of loans and deposits across different regions of Peru.

- Understand how the economic impact of COVID-19 has affected access to credit and savings behavior in the country.

- Identify the sectors and regions that have been left underserved, exploring ways to enhance financial inclusion, especially for SMEs outside Lima.

The findings will provide insight into how regional disparities in financial access can be addressed and the role targeted interventions might play in supporting economic growth and financial stability.

## 2. Data and Methodology

The data for this analysis comes from multiple sources, primarily the Financial Stability Authority of Peru and the Central Bank of Peru. The datasets used include:

- Annex 3 and 10 datasets, which provide detailed information on loans, deposits, and their distribution across different sectors and regions.

- Two dimensional tables, which help categorize financial institutions and identify their geographical locations.

- GeoJSON file, used for visualizing the geographical distribution of financial activity across Peru.

The methodology involves several steps:

- Data Cleaning and Preparation: Data was cleaned, with fields standardized, translated, and formatted to make the analysis accessible and comprehensible. Unnecessary data points were filtered out, focusing mainly on data from 2012 onwards.

- Merging Datasets: Multiple datasets were merged to provide a more comprehensive understanding of the financial landscape, ensuring consistency by using key identifiers such as dates, financial institution codes and geographical areas.

- Exploratory Data Analysis: Data was explored to identify trends, relationships, and outliers, focusing on loans and deposits, both geographically and by economic sector.

- Visual Analysis: Using tools like Altair and Shiny, visualizations were created to illustrate the regional concentration of loans and deposits, highlighting disparities between Lima and other regions.

```{python}
#| warning: false
#| include: false

import pandas as pd
import altair as alt
import geopandas as gpd
import os
from pathlib import Path

# File paths for datasets
file_paths = {
    "AN3": "../Data/raw/exportAN3.dsv",
    "AN10": "../Data/raw/exportAN10v2.dsv",
    "ENTIDAD": "../Data/raw/exportENTIDAD.dsv",
    "REP4B2": "../Data/raw/exportREP4B2.dsv",
    "REP4B3": "../Data/raw/exportREP4B3.dsv",
    "UBIGEO": "../Data/raw/exportUBIGEO.dsv"
}

# Load datasets into a dictionary
dataframes = {}
for name, path in file_paths.items():
    try:
        dataframes[name] = pd.read_csv(path, delimiter='|', encoding='latin1', low_memory=False)
    except Exception as e:
        print(f"Error loading {name}: {e}")

# Preprocess DataFrames (apply common transformations)
for name in ['AN3', 'AN10', 'REP4B2', 'REP4B3']:
    if name in dataframes:
        df = dataframes[name]
        if 'PERIODO_ID' in df.columns:
            df.loc[:, 'Date'] = pd.to_datetime(df['PERIODO_ID'], format='%Y%m%d', errors='coerce')
            df = df.loc[df['Date'] >= '2012-01-01']  #
            df.loc[:, 'YearMonth'] = df['Date'].dt.to_period('M').astype(str)  # Assign YearMonth

            dataframes[name] = df

# Access processed dataframes
AN3, AN10, REP4B2, REP4B3, ENTIDAD, UBIGEO = (
    dataframes['AN3'],
    dataframes['AN10'],
    dataframes['REP4B2'],
    dataframes['REP4B3'],
    dataframes['ENTIDAD'],
    dataframes['UBIGEO']
)

```

```{python}
#| warning: false
#| include: false

import pandas as pd

# Define a mapping from Spanish entity types to English financial institution types
fi_type_mapping = {
    "Caja municipal": "Credit Union",
    "Banco": "Bank",
    "Financiera": "Finance Company",
    "Administradora Hipotecaria": "Mortgage Administrator",
    "Caja rural": "Credit Union",
    "Empresa de Crédito": "Credit Company",
    "Empresa Emisora de Dinero Electrónico": "Electronic Money Issuer",
    "Fondo": "Fund"
}

# Apply the mapping to create the FI_TYPE column
ENTIDAD["FI_TYPE"] = ENTIDAD["ENTIDAD_TIPO"].map(fi_type_mapping)


```

```{python}
#| warning: false
#| include: false

import pandas as pd

# Merge AN3 with ENTIDAD on CODIGO_ENTIDAD_ID
merged_AN3 = pd.merge(AN3, ENTIDAD, on="CODIGO_ENTIDAD_ID", how="left")

# Select and rename columns in a single step
merged_AN3 = merged_AN3[[
    "Date",
    "YearMonth",
    "TIPO_CREDITO",
    "CODIGO_ENTIDAD_ID",
    "FI_TYPE",
    "ENTIDAD_TIPO",
    "SECTOR_ECONOMICO",
    "SALDO_TOTAL_SOLES",
    "NUMERO_NUEVOS_CREDITOS",
    "NUMERO_DEUDORES_CIERRE"
]].rename(columns={
    "SECTOR_ECONOMICO": "Industry",
    "SALDO_TOTAL_SOLES": "Loans",
    "NUMERO_NUEVOS_CREDITOS": "Loans_new",
    "NUMERO_DEUDORES_CIERRE": "Debtors"
})

# Function to categorize loan types based on TIPO_CREDITO
def categorize_loan_type(credit_type):
    if pd.isna(credit_type):
        return None
    elif "CORPORATIVOS" in credit_type :
        return "business"
    elif "HIPOTECARIOS" in credit_type:
        return "mortgages"
    elif "CONSUMO" in credit_type:
        return "personal"
    else:
        return None

merged_AN3["LOAN_TYPE"] = merged_AN3["TIPO_CREDITO"].apply(categorize_loan_type)

# Function to categorize industry names into broader categories
def categorize_industry(industry_name):
    """Categorize industry names into broader categories."""
    mapping = {
        'Agriculture and Fishing': [
            'A. Agricultura,  Ganadería, Caza y Silvicultura',
            'B. Pesca',
            '     A. Agricultura, ganadería, silvicultura y pesca'
        ],
        'Mining and Extraction': [
            'C. Minería',
            '     B. Explotación de minas y canteras'
        ],
        'Manufacturing': [
            'D. Industria Manufacturera',
            '     C. Industria manufacturera'
        ],
        'Utilities': [
            'E. Electricidad, Gas y Agua',
            '     D. Electricidad, gas, vapor y aire acondicionado',
            '     E. Agua, gestión de desechos y descontaminación'
        ],
        'Construction': [
            'F. Construcción',
            '     F. Construcción'
        ],
        'Commerce': [
            'G. Comercio',
            '     G. Comercio'
        ],
        'Hospitality': [
            'H. Hoteles y Restaurantes',
            '     I.  Alojamiento y servicios de comidas'
        ],
        'Transport and Communications': [
            'I. Transporte, Almacensmiento y Comunicaciones',
            '     H. Transporte y almacenamiento',
            '     J. Información y comunicaciones'
        ],
        'Financial and Business Services': [
            'J. Intermediación Financiera',
            'K. Actividades Inmobiliarias, empresariales y de alquiler',
            '     K. Actividades financieras y de seguros',
            '     L. Actividades inmobiliarias',
            '     M. Actividades profesionales, científicas y técnicas'
        ],
        'Public Administration and Services': [
            'L. Administración Pública y Defensa',
            '     O. Administración pública y defensa'
        ],
        'Education': [
            'M. Enseñanza',
            '     P. Enseñanza'
        ],
        'Health and Social Services': [
            'N. Servicios Sociales y de Salud',
            '     Q. Salud humana y asistencia social'
        ],
        'Arts, Entertainment, and Other Services': [
            'O. Otras Actividades de Servicios Comunitarios',
            '     R. Act. artísticas, de entretenimiento y recreativas',
            '     S. Otras actividades de servicios'
        ],
        'Domestic and Extraterritorial Activities': [
            'P,Q.Hogares Privados c/serv.doméstico y Organos Extraterritoriales',
            '     T, U. Act. hogares como empleadores y órganos extraterritoriales'
        ],
        'Personal/Mortgage loans': ['(no aplica)']
    }

    for category, keywords in mapping.items():
        if industry_name in keywords:
            return category
    return 'Unknown'

merged_AN3['industry_cat'] = merged_AN3['Industry'].apply(categorize_industry)

# Save the result to a .dsv file 
merged_AN3.to_csv("../Data/processed/an03_final.dsv", sep='|', index=False)


```

```{python}
#| warning: false
#| include: false


# Step 1: Merge AN10 with ENTIDAD on CODIGO_ENTIDAD_ID
merged_AN10 = pd.merge(AN10, ENTIDAD, on="CODIGO_ENTIDAD_ID", how="left")

# Step 2: Merge the result with UBIGEO on CODIGO_UBIGEO
merged_AN10 = pd.merge(merged_AN10, UBIGEO, on="CODIGO_UBIGEO", how="left")

merged_AN10['DEPARTAMENTO'] = merged_AN10['DEPARTAMENTO'].str.upper()

# Step 3: Select specific columns and rename them
merged_AN10 = merged_AN10[[
    "PERIODO_ID",
    "Date",
    "YearMonth",
    "CODIGO_ENTIDAD_ID",
    "FI_TYPE",
    "ENTIDAD_TIPO",
    "DEPARTAMENTO",
    "TOTAL_DEPOSITOS",
    "TOTAL_COLOCACIONES"
]].rename(columns={
    "TOTAL_DEPOSITOS": "Deposits",
    "TOTAL_COLOCACIONES": "Loans",
    "DEPARTAMENTO": "Region"
})



#  Save the result to a .dsv file
merged_AN10.to_csv("../Data/processed/an10_final.dsv", sep='|', index=False)


an10_aggregated = merged_AN10.groupby(['YearMonth', 'Region'], as_index=False).agg({
    'Deposits': 'sum',
    'Loans': 'sum'
})

an10_aggregated.to_csv("../Data/processed/an10_aggregated.dsv", sep='|', index=False)


an10_aggregated2 = merged_AN10.groupby(['YearMonth'], as_index=False).agg({
    'Deposits': 'sum',
    'Loans': 'sum'
})

an10_aggregated2.to_csv("../Data/processed/an10_aggregated2.dsv", sep='|', index=False)

```

# Data manipulation for Rep2 final
```{python}
#| warning: false
#| include: false


# Rename columns
REP4B2.rename(columns={
    "SECTOR": "industry",
    "CREDITOS_DIRECTOS": "Loans",
    "PARTICIPACION": "Share"
}, inplace=True)



# Define a function to categorize industries into broader English labels
def categorize_industry(industry):
    industry_groups = {
        'Chemical Manufacturing': [
            'Fab. de sustancias y prod. químicos'
        ],
        'Wood, Paper, Rubber, and Plastics Manufacturing': [
            'Madera y papel, caucho y plástico'
        ],
        'Metal and Mineral Manufacturing': [
            'Fab. de metales', 
            'Fab.de prods. minerales no metálicos', 
            'Fab. de prods. minerales no metálicos'
        ],
        'Mining and Quarrying': [
            'Minería', 
            'Explotación de minas y canteras'
        ],
        'Transportation and Storage': [
            'Transporte, Almacenamiento y Comunicaciones', 
            'Transporte y almacenamiento, e información y comunicaciones'
        ],
        'Agriculture, Forestry, and Fishing': [
            'Agricultura, Ganadería, Caza y Silvicultura',
            'Pesca'
        ],
        'Food and Beverage Manufacturing': [
            'Alimentos, bebidas y tabaco'
        ],
        'Commerce': [
            'Comercio'
        ],
        'Retail and Real Estate Activities': [
            'Activid. Inmob. empresariales y de alq.', 
            'Actividades inmobiliarias'
        ],
        'Mortgage and Housing': [
            'Hipotecario para vivienda'
        ],
        'Utilities and Waste Management': [
            'Electricidad, Gas y Agua', 
            'Electricidad, gas, vapor, aire acondicionado, agua, gestión de desechos y contaminación'
        ],
        'Hospitality and Food Services': [
            'Hoteles y Restaurantes', 
            'Alojamiento y servicio de comidas'
        ],
        'Construction': [
            'Construcción'
        ],
        'Non-Retail Services': [
            'Otros no minoristas', 
            'Otras actividades de servicios'
        ],
        'General Manufacturing': [
            'Resto de manufactura', 
            'Textiles y cueros'
        ],
        'Financial and Insurance Services': [
            'Intermediación Financiera', 
            'Actividades financieras y de seguros'
        ]
    }
    
    for category, industries in industry_groups.items():
        if industry in industries:
            return category
    return 'Other'  # Default category for unclassified industries

# Apply the function to categorize industries in the 'industry' column
REP4B2['industry_category'] = REP4B2['industry'].apply(categorize_industry)

# Merge with ENTIDAD on CODIGO_ENTIDAD_ID
merged_REP4B2 = pd.merge(REP4B2, ENTIDAD, on="CODIGO_ENTIDAD_ID", how="left")

# Save merged data as .dsv
merged_REP4B2.to_csv('../Data/processed/rep4b2_final.dsv', sep='|', index=False)

```


## 3. Results

####  Analysis of Total Loans and Annual Growth Rate in Peru

The graph titled **"Total Loans and Annual Growth Rate"** provides a detailed depiction of the evolution of total loans in Peru over the years, alongside their respective growth rates. It offers an insightful summary of the financial dynamics of the Peruvian economy, particularly during the challenging period of the COVID-19 pandemic.

Before 2020, the graph shows a clear upward trend in total loans, reflecting Peru's economic growth and increasing financial activity. This trend highlights expanding economic activities, where higher credit growth rates are common, especially in developing economies like Peru. The availability of credit supported small and medium enterprises (SMEs) as well as individuals, contributing to economic inclusivity and growth.

The onset of the COVID-19 pandemic in 2020 led to a significant contraction in total loans, with a sharp decline of over 40%. This sudden drop illustrates the severe economic impact that COVID-19 had on the financial system and broader economy. The decline was primarily driven by reduced economic activity, increased uncertainty, and a risk-averse approach adopted by financial institutions. Government-mandated lockdowns further contributed to a decline in demand for loans, as many businesses had to limit or suspend operations. During this period, financial institutions focused on providing relief to borrowers rather than extending new credit. The **Superintendencia de Banca, Seguros y AFP (SBS)** reported that financial entities rescheduled approximately S/ 92 billion in loans to alleviate the financial burden on borrowers. This large-scale restructuring contributed to the decline in new loan issuances.

In 2021, a robust recovery in total loans became evident, largely driven by targeted government interventions such as **Reactiva Peru**. This program aimed to provide much-needed liquidity to struggling businesses, helping them remain operational during the ongoing crisis. These interventions stabilized the financial system and revived lending activities, particularly for businesses that were severely affected. Despite this recovery, fluctuations in the annual growth rate indicate that economic recovery was uneven, with various sectors facing ongoing challenges in adjusting to the new normal.

The subsequent stabilization of total loans reflects the effects of these measures, and while lending activity resumed, the pace of growth remained cautious as the economy continued to adjust to the pandemic's long-lasting effects.

This analysis underscores the need for resilience within the financial system of developing economies like Peru, where external shocks can significantly disrupt economic stability. Moving forward, understanding regional differences and implementing targeted policies can help foster balanced growth across all areas of the country. Additionally, focusing on more resilient financial practices could help mitigate the impact of future crises, ensuring continued access to credit and economic stability.


```{python}

# Load the an03_final.dsv data
AN3 = pd.read_csv("../Data/processed/an03_final.dsv", delimiter='|', encoding='latin1')

# Aggregate data by month and calculate monthly total for Loans
monthly_data = AN3.groupby(['YearMonth']).agg({
    'Loans': 'sum'
}).reset_index()

# Calculate the annual growth rate for Loans
monthly_data['Annual_Growth_Rate'] = monthly_data['Loans'].pct_change(12) * 100

# Convert Loans to millions for display in the chart
monthly_data['Loans_Millions'] = monthly_data['Loans'] / 1_000_000

# Create the combined chart
# Bar chart for Loans in millions
bars = alt.Chart(monthly_data).mark_bar(color='lightblue').encode(
    x=alt.X('YearMonth:T'),
    y=alt.Y('Loans_Millions:Q', title='Total Loans (Millions)', axis=alt.Axis(format='~s'))
)

# Line chart for Annual Growth Rate
lines = alt.Chart(monthly_data).mark_line(color='orange').encode(
    x=alt.X('YearMonth:T', title='Year'),
    y=alt.Y('Annual_Growth_Rate:Q', title='Annual Growth Rate (%)', axis=alt.Axis(format='~s'))
).interactive()

# Combine both charts
chart = alt.layer(bars, lines).resolve_scale(
    y='independent'
).properties(
    title='Total Loans and Annual Growth Rate',
    width=400,
    height=200
)

# Save the chart as an SVG file in "Images/" directory
output_path = "Images/Total Loans and Annual Growth Rate.html"

chart.save(output_path)

# Display the chart
chart

```

#### Analysis of Annual Growth Rate of Loans by Credit Type

The second graph, titled "Annual Growth Rate of Loans by Credit Type", provides insights into the varying recovery trajectories for different types of loans in Peru. The data reveals that recovery programs, such as Reactiva Peru, initially concentrated on business loans. This focus was intended to ensure that businesses could remain operational and maintain cash flow, which was critical for the broader economic recovery. As depicted in the graph, business loans experienced an initial surge in growth, driven by these interventions.

By 2021, the government expanded support to household loans, leading to a noticeable improvement in personal and mortgage loans. This expansion was instrumental in helping families manage the economic impact of the pandemic and contributed to a broader recovery. According to the SBS, programs such as Fondo de Apoyo Empresarial (FAE) and Programa de Garantía del Gobierno Nacional (PGGN) were also introduced to provide guarantees and liquidity to both businesses and households. These measures ensured that the recovery extended beyond the business sector, eventually stabilizing personal and mortgage loans as well.

Overall, the graph highlights the differentiated impacts of the pandemic on various types of credit and underscores the importance of targeted policy interventions in supporting both businesses and households during times of crisis.

```{python}
import pandas as pd
import altair as alt

# Load the an03_final.dsv data
AN3 = pd.read_csv("../Data/processed/an03_final.dsv", delimiter='|', encoding='latin1')

# Convert Date column to datetime format
AN3['Date'] = pd.to_datetime(AN3['Date'], errors='coerce')

# Ensure Loans is in numeric format
AN3['Loans'] = pd.to_numeric(AN3['Loans'], errors='coerce')

# Create a YearMonth column for grouping and aggregation
AN3['YearMonth'] = AN3['Date'].dt.to_period('M').astype(str)

# Aggregate data by month and LOAN_TYPE, calculating total for Loans
monthly_data = AN3.groupby(['YearMonth', 'LOAN_TYPE']).agg({
    'Loans': 'sum'
}).reset_index()

# Calculate the annual growth rate for Loans within each LOAN_TYPE
monthly_data['Annual_Growth_Rate'] = monthly_data.groupby('LOAN_TYPE')['Loans'].pct_change(12) * 100

# Create the line chart
chart = alt.Chart(monthly_data).mark_line().encode(
    x=alt.X('YearMonth:T', title='Year'),
    y=alt.Y('Annual_Growth_Rate:Q', title='Annual Growth Rate (%)'),
    color=alt.Color('LOAN_TYPE:N', title='Credit Type'),  # Legend for different credit types
    tooltip=['YearMonth:T', 'LOAN_TYPE:N', 'Annual_Growth_Rate:Q']  # Add tooltips for better interactivity
).properties(
    title='Annual Growth Rate of Loans by Credit Type',
    width=400,
    height=200
).interactive()

# Save the chart as an SVG file in "Images/" directory
output_path = "Images/Annual Growth Rate of Loans by Credit Type.html"

chart.save(output_path)

# Display the chart
chart
```

####  Analysis of Total Deposits and Annual Growth Rate

The third graph, titled "Total Deposits and Annual Growth Rate", illustrates the evolution of deposits in Peru over the years, showing remarkable stability during the pandemic. Unlike loans, deposits remained relatively stable throughout this challenging period. Initially, there was a slight dip during the first months of the pandemic, but overall, deposits did not experience a drastic drop.

Several factors contributed to this stability. During uncertain times, individuals and businesses tend to save more, leading to increased deposits. The lockdowns and restrictions reduced consumer expenditures, allowing households and businesses to save a larger portion of their income. Additionally, government relief programs provided liquidity to businesses, and part of this liquidity was stored as deposits in financial institutions. This behavior underscores the contrasting dynamics of loans and deposits during times of economic stress, highlighting a more cautious approach by both households and businesses in managing their finances.

These trends reveal the critical role of deposit stability in maintaining financial system resilience. The increased savings and deposits during the pandemic provided a cushion for financial institutions, allowing them to weather the crisis more effectively. Moving forward, encouraging saving behavior and ensuring the safety of deposits will be key to maintaining stability in the financial sector during future economic uncertainties.

```{python}
import pandas as pd
import altair as alt

# Load the an10_final.dsv data
AN10 = pd.read_csv("../Data/processed/an10_final.dsv", delimiter='|', encoding='latin1')

# Convert Date column to datetime format
AN10['Date'] = pd.to_datetime(AN10['Date'], errors='coerce')

# Ensure Deposits column is in numeric format
AN10['Deposits'] = pd.to_numeric(AN10['Deposits'], errors='coerce')

# Create a YearMonth column for grouping and aggregation
AN10['YearMonth'] = AN10['Date'].dt.to_period('M').astype(str)

# Aggregate data by month and calculate monthly total for Deposits
monthly_data = AN10.groupby(['YearMonth']).agg({
    'Deposits': 'sum'
}).reset_index()

# Calculate the annual growth rate for Deposits
monthly_data['Annual_Growth_Rate'] = monthly_data['Deposits'].pct_change(12) * 100

# Convert Deposits to millions for display in the chart
monthly_data['Deposits_Millions'] = monthly_data['Deposits'] / 1_000_000

# Define y-axis limits based on data range (for example, -50 to 50 for growth rate)
y_min, y_max = -50, 50

# Create the combined chart
# Bar chart for Deposits in millions
bars = alt.Chart(monthly_data).mark_bar(color='lightblue').encode(
    x=alt.X('YearMonth:T', title='Year'),
    y=alt.Y('Deposits_Millions:Q', title='Total Deposits (Millions)', axis=alt.Axis(format='~s'))
)

# Line chart for Annual Growth Rate with specified axis range
lines = alt.Chart(monthly_data).mark_line(color='orange').encode(
    x=alt.X('YearMonth:T'),
    y=alt.Y('Annual_Growth_Rate:Q', title='Annual Growth Rate (%)', scale=alt.Scale(domain=[y_min, y_max]), axis=alt.Axis(titleColor='black'))
).interactive()

# Combine both charts with independent y-axes but similar range
chart = alt.layer(bars, lines).resolve_scale(
    y='independent'
).properties(
    title='Total Deposits and Annual Growth Rate',
    width=400,
    height=200
)


# Save the chart as an SVG file in "Images/" directory
output_path = "Images/Total Deposits and Annual Growth Rate.html"

chart.save(output_path,format='html')

# Display the chart
chart


```

#### Deposits by Region in Peru (January 2020, excluding Lima)",

```{python}
import pandas as pd
import altair as alt
import geopandas as gpd
import json

# Load the GeoJSON file
geojson_path = "../Data/raw/peru_departamental_simple.geojson"
geo_data = gpd.read_file(geojson_path)

# Load the AN10 data
AN10 = pd.read_csv("../Data/processed/an10_final.dsv", delimiter='|', encoding='latin1')

# Rename "Region" to "region" and convert contents to uppercase
AN10.rename(columns={"Region": "region"}, inplace=True)
AN10['region'] = AN10['region'].str.upper()

# Convert Date column to datetime format and extract YearMonth as a string
AN10['Date'] = pd.to_datetime(AN10['Date'], errors='coerce')
AN10['YearMonth'] = AN10['Date'].dt.to_period('M').astype(str).str.replace("-", "")

# Filter for the specific YearMonth (e.g., "202001" for January 2020)
AN10_filtered = AN10[AN10['YearMonth'] == "202001"]

# Aggregate AN10_filtered data by region
region_data = AN10_filtered.groupby('region').agg({
    'Deposits': 'sum' ,
    'Loans': 'sum' 
}).reset_index()

# Merge the GeoDataFrame with the filtered AN10 
merged_geo_data = geo_data.merge(region_data, left_on="NOMBDEP", right_on="region", how="left")

# Filter out LIMA from the merged_geo_data
merged_geo_data = merged_geo_data[merged_geo_data["region"] != "LIMA"]

# Convert GeoDataFrame to JSON for Altair
geojson_data = json.loads(merged_geo_data.to_json())

# Create a Loans map

loans_map_chart = alt.Chart(alt.Data(values=geojson_data['features'])).mark_geoshape().encode(
    color=alt.Color('properties.Loans:Q', title='Total Loans (2020-01)', scale=alt.Scale(scheme='reds')),
    tooltip=[
        alt.Tooltip('properties.NOMBDEP:N', title='Region'),
        alt.Tooltip('properties.Loans:Q', title='Loans')
    ]
).project(
    type='mercator'
).properties(
    title="Loans by Region in Peru (January 2020, excluding Lima)",
    width=300,
    height=400
)



# # Create a Deposits map

dep_map_chart = alt.Chart(alt.Data(values=geojson_data['features'])).mark_geoshape().encode(
    color=alt.Color('properties.Deposits:Q', title='Total Deposits (2020-01)', scale=alt.Scale(scheme='blues')),
    tooltip=[
        alt.Tooltip('properties.NOMBDEP:N', title='Region'),
        alt.Tooltip('properties.Deposits:Q', title='Deposits')
    ]
).project(
    type='mercator'
).properties(
    title="Deposits by Region in Peru (January 2020, excluding Lima)",
    width=300,
    height=400
)




loans_map_chart |  dep_map_chart


```

#### Deposits by Region in Peru (January 2020, excluding Lima)",



```{python}

import pandas as pd
import altair as alt
import geopandas as gpd
import json

# Load the GeoJSON file
geojson_path = "../Data/raw/peru_departamental_simple.geojson"
geo_data = gpd.read_file(geojson_path)

# Load the AN10 data
AN10 = pd.read_csv("../Data/processed/an10_final.dsv", delimiter='|', encoding='latin1')

# Rename "Region" to "region" and convert contents to uppercase
AN10.rename(columns={"Region": "region"}, inplace=True)
AN10['region'] = AN10['region'].str.upper()

# Convert Date column to datetime format and extract YearMonth as a string
AN10['Date'] = pd.to_datetime(AN10['Date'], errors='coerce')
AN10['YearMonth'] = AN10['Date'].dt.to_period('M').astype(str).str.replace("-", "")

# Filter for the specific YearMonth (e.g., "202001" for January 2020)
AN10_filtered = AN10[AN10['YearMonth'] == "202001"]

# Aggregate AN10_filtered data by region, e.g., summing Deposits for each region
region_data = AN10_filtered.groupby('region').agg({
    'Deposits': 'sum' ,
    'Loans': 'sum' 
}).reset_index()

# Merge the GeoDataFrame with the filtered AN10 data on "NOMBDEP" in geo_data and "region" in region_data
merged_geo_data = geo_data.merge(region_data, left_on="NOMBDEP", right_on="region", how="left")

# Filter out LIMA from the merged_geo_data
merged_geo_data = merged_geo_data[merged_geo_data["region"] != "LIMA"]

# Convert GeoDataFrame to JSON for Altair
geojson_data = json.loads(merged_geo_data.to_json())

# Create a map using Altair with specified width and height
map_chart = alt.Chart(alt.Data(values=geojson_data['features'])).mark_geoshape().encode(
    color=alt.Color('properties.Deposits:Q', title='Total Deposits (2020-01)', scale=alt.Scale(scheme='blues')),
    tooltip=[
        alt.Tooltip('properties.NOMBDEP:N', title='Region'),
        alt.Tooltip('properties.Deposits:Q', title='Deposits')
    ]
).project(
    type='mercator'
).properties(
    title="Deposits by Region in Peru (January 2020, excluding Lima)",
    width=300,
    height=400
)

# Display the map
map_chart


```